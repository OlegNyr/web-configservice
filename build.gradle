plugins {
    id 'org.springframework.boot' version '2.2.5.RELEASE'
    id 'net.researchgate.release' version '2.6.0'
    id "com.gorylenko.gradle-git-properties" version "2.2.2"
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'com.google.cloud.tools.jib' version '2.2.0'
    id 'java'
}

apply plugin: 'io.spring.dependency-management'
apply plugin: "com.gorylenko.gradle-git-properties"

group = 'ru.nyrk'
sourceCompatibility = '13'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

bootJar {
    launchScript()
}

springBoot {
    buildInfo()
}

ext {
    set('springBootAdminVersion', "2.2.1")
    set('springCloudVersion', "Hoxton.SR3")
}

apply from: "gradle/env.gradle"
dependencies {
    implementation 'org.springframework.cloud:spring-cloud-config-server'
    implementation('org.springframework.boot:spring-boot-starter-actuator')
    implementation('org.springframework.cloud:spring-cloud-starter-netflix-eureka-client')

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'

    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'io.projectreactor:reactor-test'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

task releaseBuild {
    dependsOn(":assemble")
}
release {
    failOnCommitNeeded = true
    failOnPublishNeeded = true
    failOnSnapshotDependencies = true
    failOnUnversionedFiles = true
    failOnUpdateNeeded = true
    revertOnFail = true
    preCommitText = ''
    preTagCommitMessage = '[skip ci] pre tag commit: '
    tagCommitMessage = '[skip ci] creating tag: '
    newVersionCommitMessage = '[skip ci] rel:'
    tagTemplate = '${version}'
    versionPropertyFile = 'gradle.properties'
    versionProperties = []
    buildTasks = ['releaseBuild']
//    versionPatterns = [
//            /(\d+)([^\d]*$)/: { Matcher m, Project p -> m.replaceAll("${(m[0][1] as int) + 1}${m[0][2]}") }
//    ]
    scmAdapters = [net.researchgate.release.GitAdapter]

    git {
        requireBranch = /prod\/.*/
        pushToRemote = 'origin'
        pushToBranchPrefix = ''
        commitVersionFileOnly = true
        signTag = false
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
apply plugin: 'maven-publish'
publishing {
    publications {
        bootJava(MavenPublication) {
            artifact bootJar
        }
    }
    repositories {
        maven {
            credentials {
                username findProperty("username")
                password findProperty("password")
            }
            def dir = 'https://dev.agria.pro/nexus/repository'
            def releasesRepoUrl = "${dir}/maven-releases"
            def snapshotsRepoUrl = "${dir}/maven-snapshots"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

afterReleaseBuild.dependsOn publish

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
test {
    useJUnitPlatform()
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
apply plugin: "com.google.cloud.tools.jib"
jib {
    from {
        image = "${registry.baseImage}"
        auth {
            username = registry.user
            password = registry.password
        }
    }

    to {
        image = "${registry.image}:${registry.tag}";
        auth {
            username = registry.user
            password = registry.password
        }
    }
    container {
        entrypoint = "/app/run-java.sh"
        args = ["run"]
        environment = [
                'JAVA_MAIN_CLASS': 'ru.nyrk.configservice.ConfigServiceApplication',
                'JAVA_OPTIONS': ["-XX:+UnlockExperimentalVMOptions",
                                 "-XX:+UseZGC",
                                 "-Xmx1g",
                                 "-Xlog:gc",
                                 "-Djava.security.egd=file:/dev/./urandom",
                                 "-XX:+UnlockDiagnosticVMOptions"]
                        .join(' ')
        ]
        workingDirectory = "/app"
        ports = ['8080']
        labels = ['app': 'ribApi']
        user = "1001"
    }
    extraDirectories {
        paths = [ "${rootProject.projectDir}/jib" ]
        permissions = [
                '/app/run-java.sh': '755',
                '/app/run-env.sh': '755',
        ]
    }
}
